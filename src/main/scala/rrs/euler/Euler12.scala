/*
	Euler12.scala

	Copyright Â© 2010 Randall R. Schulz. ALL RIGHTS RESERVED

	$Id$
*/

/*
	The sequence of triangle numbers is generated by adding the natural numbers.
	So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
	The first ten terms would be:

	1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

	Let us list the factors of the first seven triangle numbers:

		 1: 1
		 3: 1,3
		 6: 1,2,3,6
		10: 1,2,5,10
		15: 1,3,5,15
		21: 1,3,7,21
		28: 1,2,4,7,14,28

	We can see that 28 is the first triangle number to have over five divisors.

	What is the value of the first triangle number to have over five hundred divisors?
*/

package		rrs.euler


/**
	class Euler12
*/
object		Euler12
{
	import rrs.num.Factorize.nDivisors

	def
	triangle(n: Int): Int =
		(n * n + n) / 2


	def
	euler12(limit: Long): Long =
		triangle((1 to Int.MaxValue find { i => nDivisors(triangle(i)) > limit }).get)

	def
	main(args: Array[String]): Unit =
		printf("Euler12: %d%n", euler12(500))
}
