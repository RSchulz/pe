/*
	Euler45.scala

	Copyright © 2010 Randall R. Schulz. ALL RIGHTS RESERVED

	$Id$
*/

/*
	Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:
		Triangle 	  	T_(n)=n(n+1)/2 	  	1, 3, 6, 10, 15, ...
		Pentagonal 	  	P_(n)=n(3n−1)/2 	1, 5, 12, 22, 35, ...
		Hexagonal 	  	H_(n)=n(2n−1) 	  	1, 6, 15, 28, 45, ...

	It can be verified that T_(285) = P_(165) = H_(143) = 40755.

	Find the next triangle number that is also pentagonal and hexagonal.
*/


package		rrs.euler


/**
	class Euler45
*/
object		Euler45
{
	import math.{abs, sqrt, floor}

	val epsilon = 1e-6

	def
	isIntegral(d: Double): Boolean =
		abs(floor(d) - d) < epsilon


	def
	ints(n: Long): Stream[Long] =
		n #:: ints(n + 1)


	def
	tri(n: Long): Long =
		n * (n + 1) / 2

	def
	irt(T: Long): (Double, Double) =
		( sqrt(2.0d * T + 0.25d) - 0.5d,
		 -sqrt(2.0d * T + 0.25d) - 0.5d)


	def
	pent(n: Long): Long =
		n * (3 * n - 1) / 2

	def
	tnep(P: Long): (Double, Double) =
		((1 + sqrt(24.0d * P + 1.0d)) / 6.0d,
		 (1 - sqrt(24.0d * P + 1.0d)) / 6.0d)


	def
	hex(n: Long): Long =
		n * (2 * n - 1)

	def
	xeh(H: Long): (Double, Double) =
		( sqrt(H / 2.0d + 0.0625d) + 0.25d,
		 -sqrt(H / 2.0d + 0.0625d) + 0.25d)

	def
	euler45: Long =
		tri(ints(286) dropWhile { n =>
				val t = tri(n)
				!isIntegral(xeh(t)._1) || !isIntegral(tnep(t)._1)
			} head )

	def
	main(args: Array[String]): Unit =
		printf("Euler45: %d%n", euler45)
}
