/*
	Euler44.scala

	Copyright © 2010 Randall R. Schulz. ALL RIGHTS RESERVED

	$Id$
*/

/*
	Pentagonal numbers are generated by the formula, P(n) = n(3n − 1) / 2.
	The first ten pentagonal numbers are:

		1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

	It can be seen that P(4) + P(7) = 22 + 70 = 92 = P(8).
	However, their difference, 70 − 22 = 48, is not pentagonal.

	Find the pair of pentagonal numbers, P(j) and P(k),
	for which their sum and difference is pentagonal and
	D = |P(k) − P(j)| is minimised; what is the value of D?
*/


package		rrs.euler


/**
	class Euler44
*/
object		Euler44
{
	import math._

	val epsilon = 1e-6


	def
	pent(n: Int): Int =
		(3 * n * n - n) / 2

	def
	tnep(P: Long): (Double, Double) =
		((1 + sqrt(24.0d * P + 1.0d)) / 6.0d,
		 (1 - sqrt(24.0d * P + 1.0d)) / 6.0d)

	def
	isPent(P: Long): Boolean = {
		val n = tnep(P)
		isIntegral(n._1)
	}

	def
	isIntegral(d: Double): Boolean =
		abs(d - rint(d)) < epsilon


	def
	pentPair(i: Int, j: Int): Option[(Int, Int, Int)] =
		if (isPent(pent(i) + pent(j))) {
			val pDiff = abs(pent(i) - pent(j))
			if (isPent(pDiff))
				Some((i, j, pDiff))
			else
				None
		}
		else
			None


	def
	euler44: (Int, Int, Int) =
		( for {	d	<-	1 to 2000
				i	<-	2 to 2000
				j	<-	List(i - d, i +d)
				if		j > 0
				pp	<-	pentPair(i, j)
		  } yield
				pp
		).sorted(Ordering.by((pp: (Int, Int, Int)) => pp._3)).head

	def
	main(args: Array[String]): Unit = {
		val answer = euler44
		printf("Euler44: m=%d, n=%d; D=%d%n", answer._1, answer._2, answer._3)
	}
}
